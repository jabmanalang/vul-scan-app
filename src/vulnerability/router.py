from typing import Annotated

from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session

from src.vulnerability.schemas import VulnerabilityIn, VulnerabilityOut, VulnerabilityListOut
from src.vulnerability.utilties import map_to_schema
from src.database import session, crud


router = APIRouter(
    prefix="/vulnerabilities"
)


@router.post("", response_model=VulnerabilityOut)
def post_vulnerability(
        db: Annotated[Session, Depends(session.get_db)],
        post_vulnerability_request: VulnerabilityIn
):
    # TODO: Validate scan and assets if existing
    vul = crud.create_vulnerability(db, vulnerability_schema=post_vulnerability_request)
    vul_out = map_to_schema(vul=vul)
    return vul_out


@router.get("", response_model=VulnerabilityListOut)
def get_vulnerability_with_query(
        db: Annotated[Session, Depends(session.get_db)],
        from_scan: int | None = None,
        affected_asset: int | None = None
):
    vuls = crud.read_vulnerabilities(db, scan_id=from_scan, asset_id=affected_asset)
    vuls_out = []
    for vul in vuls:
        vuls_out.append(map_to_schema(vul))
    return {"vulnerabilities": vuls_out}
